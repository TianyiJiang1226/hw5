// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rtheta
int rtheta(double lambda1, double lambda2, NumericVector X);
RcppExport SEXP _hw5_rtheta(SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rtheta(lambda1, lambda2, X));
    return rcpp_result_gen;
END_RCPP
}
// gibbs
NumericMatrix gibbs(NumericVector X, int burnin, int iter);
RcppExport SEXP _hw5_gibbs(SEXP XSEXP, SEXP burninSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs(X, burnin, iter));
    return rcpp_result_gen;
END_RCPP
}
// halfnormal
double halfnormal(double x, double sigma, double theta, double s);
RcppExport SEXP _hw5_halfnormal(SEXP xSEXP, SEXP sigmaSEXP, SEXP thetaSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(halfnormal(x, sigma, theta, s));
    return rcpp_result_gen;
END_RCPP
}
// MH_ratio
double MH_ratio(double current, double candidate, double target, double theta, double s);
RcppExport SEXP _hw5_MH_ratio(SEXP currentSEXP, SEXP candidateSEXP, SEXP targetSEXP, SEXP thetaSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current(currentSEXP);
    Rcpp::traits::input_parameter< double >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(MH_ratio(current, candidate, target, theta, s));
    return rcpp_result_gen;
END_RCPP
}
// halfnormal_kernel
double halfnormal_kernel(double y, double sigma, double theta, double x_sum);
RcppExport SEXP _hw5_halfnormal_kernel(SEXP ySEXP, SEXP sigmaSEXP, SEXP thetaSEXP, SEXP x_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type x_sum(x_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(halfnormal_kernel(y, sigma, theta, x_sum));
    return rcpp_result_gen;
END_RCPP
}
// calculate_acceptance_ratio
double calculate_acceptance_ratio(double current, double candidate, double rate_proposal, double rate_target, double theta, double x_sum);
RcppExport SEXP _hw5_calculate_acceptance_ratio(SEXP currentSEXP, SEXP candidateSEXP, SEXP rate_proposalSEXP, SEXP rate_targetSEXP, SEXP thetaSEXP, SEXP x_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current(currentSEXP);
    Rcpp::traits::input_parameter< double >::type candidate(candidateSEXP);
    Rcpp::traits::input_parameter< double >::type rate_proposal(rate_proposalSEXP);
    Rcpp::traits::input_parameter< double >::type rate_target(rate_targetSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type x_sum(x_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_acceptance_ratio(current, candidate, rate_proposal, rate_target, theta, x_sum));
    return rcpp_result_gen;
END_RCPP
}
// changepoint_detection_halfnormal
NumericMatrix changepoint_detection_halfnormal(IntegerVector X, int n, int theta0, double sigma_g, double sigma_hn, int burnin, int nmcmc);
RcppExport SEXP _hw5_changepoint_detection_halfnormal(SEXP XSEXP, SEXP nSEXP, SEXP theta0SEXP, SEXP sigma_gSEXP, SEXP sigma_hnSEXP, SEXP burninSEXP, SEXP nmcmcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_g(sigma_gSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_hn(sigma_hnSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type nmcmc(nmcmcSEXP);
    rcpp_result_gen = Rcpp::wrap(changepoint_detection_halfnormal(X, n, theta0, sigma_g, sigma_hn, burnin, nmcmc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hw5_rtheta", (DL_FUNC) &_hw5_rtheta, 3},
    {"_hw5_gibbs", (DL_FUNC) &_hw5_gibbs, 3},
    {"_hw5_halfnormal", (DL_FUNC) &_hw5_halfnormal, 4},
    {"_hw5_MH_ratio", (DL_FUNC) &_hw5_MH_ratio, 5},
    {"_hw5_halfnormal_kernel", (DL_FUNC) &_hw5_halfnormal_kernel, 4},
    {"_hw5_calculate_acceptance_ratio", (DL_FUNC) &_hw5_calculate_acceptance_ratio, 6},
    {"_hw5_changepoint_detection_halfnormal", (DL_FUNC) &_hw5_changepoint_detection_halfnormal, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_hw5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
